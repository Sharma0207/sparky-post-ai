// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = import.meta.env.VITE_SUPABASE_URL as string | undefined;
const SUPABASE_PUBLISHABLE_KEY = import.meta.env.VITE_SUPABASE_PUBLISHABLE_KEY as string | undefined;

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

let supabaseClient: any;

if (SUPABASE_URL && SUPABASE_PUBLISHABLE_KEY) {
  supabaseClient = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
    auth: {
      storage: typeof window !== 'undefined' ? (window.localStorage as any) : undefined,
      persistSession: true,
      autoRefreshToken: true,
    },
  });
} else {
  // Provide a minimal stub to avoid runtime errors when env vars are missing.
  // Consumers (like Dashboard) should handle the returned error object.
  console.warn(
    'Supabase not configured: VITE_SUPABASE_URL or VITE_SUPABASE_PUBLISHABLE_KEY is missing. Supabase functions will return a descriptive error.'
  );

  supabaseClient = {
    functions: {
      invoke: async (_: string, _opts?: any) => {
        return {
          data: null,
          error: new Error('Supabase not configured: set VITE_SUPABASE_URL and VITE_SUPABASE_PUBLISHABLE_KEY'),
        };
      },
    },
    auth: {
      getSession: async () => ({ data: null }),
      // other auth stubs can be added if needed
    },
  };
}

export const supabase = supabaseClient;
